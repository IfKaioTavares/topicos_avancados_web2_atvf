const axios = require('axios');

class DeviceSimulator {
    constructor(config) {
        this.resourceId = config.resourceId;
        this.timeoutDurationMinutes = config.timeoutDurationMinutes;
        this.backendUrl = config.backendUrl;
        this.statusIntervalSeconds = config.statusIntervalSeconds;
        
        // Configura√ß√µes de libera√ß√£o autom√°tica
        this.autoReleaseEnabled = config.autoReleaseEnabled;
        this.autoReleaseProbability = config.autoReleaseProbability;
        this.autoReleaseMinMinutes = config.autoReleaseMinMinutes;
        
        // Estado atual do dispositivo
        this.currentStatus = 'FREE';  // FREE, RESERVED, INACTIVE
        this.reservedAt = null;
        this.timeoutTimer = null;
        this.statusInterval = null;
        this.commandCheckInterval = null;
        this.autoReleaseInterval = null;
        this.isFirstStatusSent = false;
        
        console.log(`üîß Dispositivo ${this.resourceId} inicializado com timeout de ${this.timeoutDurationMinutes} minutos`);
        
        if (this.autoReleaseEnabled) {
            console.log(`üé≤ Libera√ß√£o autom√°tica ativada: ${(this.autoReleaseProbability * 100).toFixed(1)}% de chance (m√≠n: ${this.autoReleaseMinMinutes}min)`);
        }
    }
    
    start() {
        console.log(`‚ñ∂Ô∏è  Iniciando simulador para recurso ${this.resourceId}...`);
        
        // Iniciar envio peri√≥dico de status
        this.startStatusReporting();
        
        // Iniciar verifica√ß√£o peri√≥dica de comandos
        this.startCommandChecking();
        
        // Iniciar libera√ß√£o autom√°tica se habilitada
        if (this.autoReleaseEnabled) {
            this.startAutoReleaseChecking();
        }
        
        console.log(`‚úÖ Simulador ativo! Status inicial: ${this.currentStatus}`);
    }
    
    stop() {
        console.log(`‚èπÔ∏è  Parando simulador para recurso ${this.resourceId}...`);
        
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
        }
        
        if (this.commandCheckInterval) {
            clearInterval(this.commandCheckInterval);
        }
        
        if (this.autoReleaseInterval) {
            clearInterval(this.autoReleaseInterval);
        }
        
        if (this.timeoutTimer) {
            clearTimeout(this.timeoutTimer);
        }
        
        console.log('‚úÖ Simulador parado');
    }
    
    startStatusReporting() {
        // Enviar status imediatamente
        this.sendStatusUpdate();
        
        // Configurar envio peri√≥dico
        this.statusInterval = setInterval(() => {
            this.sendStatusUpdate();
        }, this.statusIntervalSeconds * 1000);
        
        console.log(`üì° Envio de status configurado a cada ${this.statusIntervalSeconds} segundos`);
    }
    
    startCommandChecking() {
        // Verificar comandos a cada 10 segundos
        this.commandCheckInterval = setInterval(() => {
            this.checkForCommands();
        }, 10000);
        
        console.log('üîç Verifica√ß√£o de comandos ativada (a cada 10 segundos)');
    }
    
    startAutoReleaseChecking() {
        // Verificar libera√ß√£o autom√°tica a cada 2 minutos
        this.autoReleaseInterval = setInterval(() => {
            this.checkAutoRelease();
        }, 120000); // 2 minutos
        
        console.log('üé≤ Verifica√ß√£o de libera√ß√£o autom√°tica ativada (a cada 2 minutos)');
    }
    
    async sendStatusUpdate() {
        try {
            const payload = {
                resourceId: this.resourceId,
                status: this.currentStatus,
                timestamp: new Date().toISOString(),
                firstConnection: !this.isFirstStatusSent // Flag para ativa√ß√£o no backend
            };
            
            const response = await axios.post(
                `${this.backendUrl}/api/v1/devices/status`,
                payload,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    timeout: 5000 // 5 segundos de timeout
                }
            );
            
            if (!this.isFirstStatusSent) {
                console.log(`üîå Primeira conex√£o realizada - dispositivo ativado no backend`);
                this.isFirstStatusSent = true;
            }
            
            console.log(`üì§ Status enviado: ${this.currentStatus} (${response.status})`);
            
        } catch (error) {
            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
                console.error(`‚ùå N√£o foi poss√≠vel conectar ao backend: ${this.backendUrl}`);
            } else if (error.response) {
                console.error(`‚ùå Erro ao enviar status: ${error.response.status} - ${error.response.data}`);
            } else {
                console.error(`‚ùå Erro ao enviar status: ${error.message}`);
            }
        }
    }
    
    async checkForCommands() {
        try {
            // Verificar comando de reserva
            const reserveResponse = await axios.get(
                `${this.backendUrl}/api/v1/devices/${this.resourceId}/commands/reserve`,
                { timeout: 3000 }
            );
            
            if (reserveResponse.data && reserveResponse.data.command === 'RESERVE') {
                this.executeReserveCommand();
            }
            
        } catch (error) {
            // Se der 404, n√£o h√° comando pendente, isso √© normal
            if (error.response && error.response.status !== 404) {
                console.error(`‚ùå Erro ao verificar comando de reserva: ${error.response?.status}`);
            }
        }
        
        try {
            // Verificar comando de libera√ß√£o
            const releaseResponse = await axios.get(
                `${this.backendUrl}/api/v1/devices/${this.resourceId}/commands/release`,
                { timeout: 3000 }
            );
            
            if (releaseResponse.data && releaseResponse.data.command === 'RELEASE') {
                this.executeReleaseCommand();
            }
            
        } catch (error) {
            // Se der 404, n√£o h√° comando pendente, isso √© normal
            if (error.response && error.response.status !== 404) {
                console.error(`‚ùå Erro ao verificar comando de libera√ß√£o: ${error.response?.status}`);
            }
        }
    }
    
    executeReserveCommand() {
        if (this.currentStatus === 'FREE') {
            this.currentStatus = 'RESERVED';
            this.reservedAt = new Date();
            
            // Configurar timeout autom√°tico
            this.setAutoTimeout();
            
            console.log(`üîí Recurso RESERVADO √†s ${this.reservedAt.toLocaleString()}`);
            console.log(`‚è∞ Timeout autom√°tico em ${this.timeoutDurationMinutes} minutos`);
            
            // Enviar atualiza√ß√£o imediatamente
            this.sendStatusUpdate();
        } else {
            console.log(`‚ö†Ô∏è  Comando de reserva ignorado - status atual: ${this.currentStatus}`);
        }
    }
    
    executeReleaseCommand() {
        if (this.currentStatus === 'RESERVED') {
            this.currentStatus = 'FREE';
            this.reservedAt = null;
            
            // Cancelar timeout se existir
            if (this.timeoutTimer) {
                clearTimeout(this.timeoutTimer);
                this.timeoutTimer = null;
            }
            
            console.log(`üîì Recurso LIBERADO √†s ${new Date().toLocaleString()}`);
            
            // Enviar atualiza√ß√£o imediatamente
            this.sendStatusUpdate();
        } else {
            console.log(`‚ö†Ô∏è  Comando de libera√ß√£o ignorado - status atual: ${this.currentStatus}`);
        }
    }
    
    checkAutoRelease() {
        // S√≥ verifica libera√ß√£o autom√°tica se estiver reservado e habilitado
        if (!this.autoReleaseEnabled || this.currentStatus !== 'RESERVED' || !this.reservedAt) {
            return;
        }
        
        // Verificar se j√° passou o tempo m√≠nimo desde a reserva
        const minutesSinceReserved = (new Date() - this.reservedAt) / (1000 * 60);
        if (minutesSinceReserved < this.autoReleaseMinMinutes) {
            return;
        }
        
        // Gerar n√∫mero aleat√≥rio para verificar se deve liberar
        const randomValue = Math.random();
        
        if (randomValue <= this.autoReleaseProbability) {
            console.log(`üé≤ LIBERA√á√ÉO AUTOM√ÅTICA! (${(randomValue * 100).toFixed(1)}% ‚â§ ${(this.autoReleaseProbability * 100).toFixed(1)}%)`);
            console.log(`   Recurso estava reservado h√° ${minutesSinceReserved.toFixed(1)} minutos`);
            
            // Liberar o recurso
            this.currentStatus = 'FREE';
            this.reservedAt = null;
            
            // Cancelar timeout se existir
            if (this.timeoutTimer) {
                clearTimeout(this.timeoutTimer);
                this.timeoutTimer = null;
            }
            
            // Enviar atualiza√ß√£o imediatamente
            this.sendStatusUpdate();
        } else {
            console.log(`üé≤ Verifica√ß√£o de libera√ß√£o: ${(randomValue * 100).toFixed(1)}% > ${(this.autoReleaseProbability * 100).toFixed(1)}% - mantendo reservado`);
        }
    }
    
    setAutoTimeout() {
        // Cancelar timeout anterior se existir
        if (this.timeoutTimer) {
            clearTimeout(this.timeoutTimer);
        }
        
        // Configurar novo timeout
        const timeoutMs = this.timeoutDurationMinutes * 60 * 1000;
        
        this.timeoutTimer = setTimeout(() => {
            console.log(`‚è∞ TIMEOUT AUTOM√ÅTICO! Liberando recurso ap√≥s ${this.timeoutDurationMinutes} minutos`);
            this.currentStatus = 'FREE';
            this.reservedAt = null;
            this.timeoutTimer = null;
            
            // Enviar atualiza√ß√£o imediatamente
            this.sendStatusUpdate();
        }, timeoutMs);
    }
    
    // M√©todos auxiliares
    getCurrentStatus() {
        return {
            status: this.currentStatus,
            reservedAt: this.reservedAt,
            timeoutInMinutes: this.timeoutDurationMinutes
        };
    }
    
    forceStatus(newStatus) {
        const oldStatus = this.currentStatus;
        this.currentStatus = newStatus;
        
        if (newStatus === 'RESERVED') {
            this.reservedAt = new Date();
            this.setAutoTimeout();
        } else {
            this.reservedAt = null;
            if (this.timeoutTimer) {
                clearTimeout(this.timeoutTimer);
                this.timeoutTimer = null;
            }
        }
        
        console.log(`üîÑ Status for√ßado: ${oldStatus} ‚Üí ${newStatus}`);
        
        // Enviar atualiza√ß√£o imediatamente
        this.sendStatusUpdate();
    }
}

module.exports = DeviceSimulator;